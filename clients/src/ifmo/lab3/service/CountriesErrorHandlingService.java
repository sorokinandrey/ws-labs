
package ifmo.lab3.service;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.7-b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "CountriesErrorHandlingService", targetNamespace = "http://lab3.ifmo/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface CountriesErrorHandlingService {


    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws SecurityException
     * @throws SqlException
     * @throws IllegalArgumentException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addCountry", targetNamespace = "http://lab3.ifmo/", className = "ifmo.lab3.service.AddCountry")
    @ResponseWrapper(localName = "addCountryResponse", targetNamespace = "http://lab3.ifmo/", className = "ifmo.lab3.service.AddCountryResponse")
    @Action(input = "http://lab3.ifmo/CountriesErrorHandlingService/addCountryRequest", output = "http://lab3.ifmo/CountriesErrorHandlingService/addCountryResponse", fault = {
        @FaultAction(className = SecurityException.class, value = "http://lab3.ifmo/CountriesErrorHandlingService/addCountry/Fault/SecurityException"),
        @FaultAction(className = IllegalArgumentException.class, value = "http://lab3.ifmo/CountriesErrorHandlingService/addCountry/Fault/IllegalArgumentException"),
        @FaultAction(className = SqlException.class, value = "http://lab3.ifmo/CountriesErrorHandlingService/addCountry/Fault/SqlException")
    })
    public String addCountry(
        @WebParam(name = "arg0", targetNamespace = "")
        Country arg0)
        throws IllegalArgumentException, SecurityException, SqlException
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns ifmo.lab3.service.ResponseCode
     * @throws SecurityException
     * @throws IllegalArgumentException
     * @throws NotFoundException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateCountry", targetNamespace = "http://lab3.ifmo/", className = "ifmo.lab3.service.UpdateCountry")
    @ResponseWrapper(localName = "updateCountryResponse", targetNamespace = "http://lab3.ifmo/", className = "ifmo.lab3.service.UpdateCountryResponse")
    @Action(input = "http://lab3.ifmo/CountriesErrorHandlingService/updateCountryRequest", output = "http://lab3.ifmo/CountriesErrorHandlingService/updateCountryResponse", fault = {
        @FaultAction(className = SecurityException.class, value = "http://lab3.ifmo/CountriesErrorHandlingService/updateCountry/Fault/SecurityException"),
        @FaultAction(className = IllegalArgumentException.class, value = "http://lab3.ifmo/CountriesErrorHandlingService/updateCountry/Fault/IllegalArgumentException"),
        @FaultAction(className = NotFoundException.class, value = "http://lab3.ifmo/CountriesErrorHandlingService/updateCountry/Fault/NotFoundException")
    })
    public ResponseCode updateCountry(
        @WebParam(name = "arg0", targetNamespace = "")
        Country arg0)
        throws IllegalArgumentException, NotFoundException, SecurityException
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns ifmo.lab3.service.ResponseCode
     * @throws SecurityException
     * @throws IllegalArgumentException
     * @throws NotFoundException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteCountry", targetNamespace = "http://lab3.ifmo/", className = "ifmo.lab3.service.DeleteCountry")
    @ResponseWrapper(localName = "deleteCountryResponse", targetNamespace = "http://lab3.ifmo/", className = "ifmo.lab3.service.DeleteCountryResponse")
    @Action(input = "http://lab3.ifmo/CountriesErrorHandlingService/deleteCountryRequest", output = "http://lab3.ifmo/CountriesErrorHandlingService/deleteCountryResponse", fault = {
        @FaultAction(className = SecurityException.class, value = "http://lab3.ifmo/CountriesErrorHandlingService/deleteCountry/Fault/SecurityException"),
        @FaultAction(className = IllegalArgumentException.class, value = "http://lab3.ifmo/CountriesErrorHandlingService/deleteCountry/Fault/IllegalArgumentException"),
        @FaultAction(className = NotFoundException.class, value = "http://lab3.ifmo/CountriesErrorHandlingService/deleteCountry/Fault/NotFoundException")
    })
    public ResponseCode deleteCountry(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws IllegalArgumentException, NotFoundException, SecurityException
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<ifmo.lab3.service.Country>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCountries", targetNamespace = "http://lab3.ifmo/", className = "ifmo.lab3.service.GetCountries")
    @ResponseWrapper(localName = "getCountriesResponse", targetNamespace = "http://lab3.ifmo/", className = "ifmo.lab3.service.GetCountriesResponse")
    @Action(input = "http://lab3.ifmo/CountriesErrorHandlingService/getCountriesRequest", output = "http://lab3.ifmo/CountriesErrorHandlingService/getCountriesResponse")
    public List<Country> getCountries(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns ifmo.lab3.service.Country
     * @throws IllegalArgumentException
     * @throws NotFoundException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCountry", targetNamespace = "http://lab3.ifmo/", className = "ifmo.lab3.service.GetCountry")
    @ResponseWrapper(localName = "getCountryResponse", targetNamespace = "http://lab3.ifmo/", className = "ifmo.lab3.service.GetCountryResponse")
    @Action(input = "http://lab3.ifmo/CountriesErrorHandlingService/getCountryRequest", output = "http://lab3.ifmo/CountriesErrorHandlingService/getCountryResponse", fault = {
        @FaultAction(className = IllegalArgumentException.class, value = "http://lab3.ifmo/CountriesErrorHandlingService/getCountry/Fault/IllegalArgumentException"),
        @FaultAction(className = NotFoundException.class, value = "http://lab3.ifmo/CountriesErrorHandlingService/getCountry/Fault/NotFoundException")
    })
    public Country getCountry(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws IllegalArgumentException, NotFoundException
    ;

}
